

###RevBayes-tutorial here https://revbayes.github.io/tutorials/biogeo/biogeo_simple.html ####

range_fn ="/scratch/nmnh_corals/quattrinia/analysis/UCE/octos21/biolumpaper/revbayes/depthrangev_final.nex" 
tree_fn = "/scratch/nmnh_corals/quattrinia/analysis/UCE/octos21/biolumpaper/revbayes/octo.mcc.mean.tree"
out_fn="/scratch/nmnh_corals/quattrinia/analysis/UCE/octos21/biolumpaper/deep4v3"
dat_range_01 = readDiscreteCharacterData(range_fn)
dat_range_n = formatDiscreteCharacterData(dat_range_01, "DEC")
n_areas = dat_range_01.nchar()
dat_range_01[1]
dat_range_n[1]
state_desc = dat_range_n.getStateDescriptions()
state_desc_str = "state,range\n"
for (i in 1:state_desc.size()){
    state_desc_str += (i-1) + "," + state_desc[i] + "\n"
}
write(state_desc_str, file=out_fn+".state_labels.txt")
tree <- readTrees(tree_fn)[1]
rate_bg ~ dnLoguniform(1E-4,1E2)
rate_bg.setValue(1E-2)
moves = VectorMoves()
moves.append( mvSlide(rate_bg, weight=4) )
dispersal_rate <- 1.0
for (i in 1:n_areas) {
  for (j in 1:n_areas) {
    dr[i][j] <- dispersal_rate
  }
}
log_sd <- 0.5
log_mean <- ln(1) - 0.5*log_sd^2
extirpation_rate ~ dnLognormal(mean=log_mean, sd=log_sd)
moves.append( mvScale(extirpation_rate, weight=2) )
for (i in 1:n_areas) {
  for (j in 1:n_areas) {
    er[i][j] <- 0.0       
  }
  er[i][i] := extirpation_rate
}
Q_DEC := fnDECRateMatrix(dispersalRates=dr, extirpationRates=er)
clado_event_types <- [ "s", "a" ]
clado_event_probs <- simplex(1, 1)
P_DEC := fnDECCladoProbs(eventProbs=clado_event_probs,
                            eventTypes=clado_event_types,
                            numCharacters=n_areas)
                            
m_bg ~ dnPhyloCTMCClado(tree=tree,
                           Q=Q_DEC,
                           cladoProbs=P_DEC,
                           branchRates=rate_bg,
                           nSites=1,
                           type="NaturalNumbers")
m_bg.clamp(dat_range_n)
monitors = VectorMonitors()
monitors.append( mnScreen(rate_bg, extirpation_rate, printgen=100) )
monitors.append( mnModel(file=out_fn+".params.log", printgen=10) )
monitors.append( mnFile(tree, file=out_fn+".tre", printgen=10) )
monitors.append( mnJointConditionalAncestralState(tree=tree,
                                                  ctmc=m_bg,
                                                  filename=out_fn+".states.log",
                                                  type="NaturalNumbers",
                                                  printgen=10,
                                                  withTips=true,
                                                  withStartStates=true) )
monitors.append( mnStochasticCharacterMap(ctmc=m_bg,
                                          filename=out_fn+".stoch.log",
                                          printgen=100) )
mymodel = model(m_bg)
mymcmc = mcmc(mymodel, moves, monitors)
mymcmc.run(5000)

#Open RB in new terminal

out_fn="/scratch/nmnh_corals/quattrinia/analysis/UCE/octos21/biolumpaper/revbayes/deepfinal3" 
	#or out_fn="water" 
out_str="/scratch/nmnh_corals/quattrinia/analysis/UCE/octos21/biolumpaper/revbayes/deepfinal3" 
out_state_fn = out_str + ".states.log"
out_tree_fn = out_str + ".tre"
out_mcc_fn = out_str + ".mcc.tre" 
tree_trace = readTreeTrace(file=out_tree_fn, treetype="clock")
tree_trace = readTreeTrace(file=out_tree_fn, treetype="clock")
tree_trace.setBurnin(0.25)
n_burn = tree_trace.getBurnin()
mcc_tree = mccTree(tree_trace, file=out_mcc_fn)
state_trace = readAncestralStateTrace(file=out_state_fn)
tree_trace = readAncestralStateTreeTrace(file=out_tree_fn, treetype="clock")
anc_tree = ancestralStateTree(tree=mcc_tree,
                              ancestral_state_trace_vector=state_trace,
                              tree_trace=tree_trace,
                              include_start_states=true,
                              file=out_str+".ase.tre",
                              burnin=n_burn,
                              site=1)
                              
                              
#plotting from "plot_anc_range.simple.R" in RevBayes tutorial  https://revbayes.github.io/tutorials/biogeo/biogeo_simple.html
library(RevGadgets)
library(ggplot2)
library(tidyverse)
library(tibble)
library(ggtree)

fp = "/Users/quattrinia/Manuscripts_and_Reports/coral_biolum/revbayes_final/" # edit to provide an absolute filepath
plot_fn = paste(fp, "output/deepfinal3.pdf",sep="")
tree_fn = paste(fp, "deepfinal3.tre", sep="")
label_fn = paste(fp, "deepfinal3.state_labels.txt", sep="")
color_fn = paste(fp, "range.colors.txt", sep="")
                       
#make_states function from "plot_anc_range.util.R"
make_states = function(label_fn, color_fn, fp="./") {

    # generate colors for ranges
    range_color_list = read.csv(color_fn, header=T, sep=",", colClasses="character")
    
    # get area names
    area_names = unlist(sapply(range_color_list$range, function(y) { if (nchar(y)==1) { return(y) } }))
    
    # get state labels
    state_descriptions = read.csv(label_fn, header=T, sep=",", colClasses="character")
    
    # map presence-absence ranges to area names
    range_labels = sapply(state_descriptions$range[2:nrow(state_descriptions)],
        function(x) {
            present = as.vector(gregexpr(pattern="1", x)[[1]])
            paste( area_names[present], collapse="")
        })

    # map labels to colors 
    range_colors = range_color_list$color[ match(range_labels, range_color_list$range) ]
    
    # generate state/color labels
    idx = 1
    st_lbl = list()
    st_colors = c()
    for (j in 1:(nrow(state_descriptions)-1)) {
        st_lbl[[ as.character(j) ]] = range_labels[j]
        st_colors[j] = range_colors[j]
    }
    st_colors[ length(st_colors)+1 ] = "lightgray"
    st_lbl[["misc."]] = "misc."   
    
    return( list(state_labels=st_lbl, state_colors=st_colors) )
}
# get state labels and state colors
states = make_states(label_fn, color_fn, fp=fp)
state_labels = states$state_labels
state_colors = states$state_colors

# plot the ancestral states
ase <- processAncStates(tree_fn,
                        # Specify state labels.
                        # These numbers correspond to
                        # your input data file.
                        state_labels = state_labels)

pp  <- plotAncStatesPie(t = ase,
                        state_transparency = 1,
                        state_labels=state_labels,
                        pie_colors=c("#CC00FF", "darkblue", "#8DC63F"), 
                            tip_labels_size=1.0,
                            tip_labels_offset=0.2,
                            node_label_size=1.0,
                            shoulder_label_size=0,
                            show_posterior_legend=T,
                            tip_pie_size=0.3,
                            node_pie_size=1.0,
                            pie_nudge_x=0.03,
                            pie_nudge_y=0.16,
                            alpha=1) +
 # Move the legend
    theme(legend.position = c(0.1, 0.75))
  
#plot
plot(pp)                         
# get plot dimensions
x_phy = max(pp$data$x)       # get height of tree
x_label = 0.1                # choose space for tip labels
x_start =735                 # choose starting age (greater than x_phy)
x0 = -(x_start - x_phy)      # determine starting pos for xlim
x1 = x_phy + x_label         # determine ending pos for xlim

# add axis
pp2 = pp + theme_tree2()
pp2 = pp2 + labs(x="Age (Ma)")

# change x coordinates
pp3 = pp2 + coord_cartesian(xlim=c(x0,x1), expand=TRUE)  

#plot tree
plot(pp3)

svglite(file="Rplot1.svg",pp)
> plot(pp3)
> invisible(dev.off())
> ggsave("Rplot1.svg")

#then, make final edits in illustrator
